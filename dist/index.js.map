{"version":3,"file":"index.js","sources":["../lib/utils.js","../lib/SuperTool.js"],"sourcesContent":["/**\n * Returns true of a given parameter is not null and not undefined.\n * @param any any input is feasible\n * @return {boolean} true if defined, otherwise false\n */\nexport const exists = any => any !== null && typeof any !== 'undefined'\n\n/**\n * This should be removed by rollup's tree shaking\n * @private\n */\nexport const ignore = () => {}\n","import { exists } from './utils.js'\n\n/**\n * The possible states of the supertool.\n * @private\n */\nconst superToolStates = {\n  great: 'great',\n  cool: 'cool',\n  awesome: 'awesome',\n  swag: 'swag'\n}\n\n/**\n * The super tool class. Holds a state and implements the execute command.\n */\n\nclass SuperTool {\n  /**\n   * The possible states of the SuperTool.\n   * @return {{great: string, cool: string, awesome: string, swag: string}}\n   */\n\n  static get states () {\n    return superToolStates\n  }\n\n  /**\n   * Validates a state. To be valid, the value needs to be part of the {SuperTool.states}.\n   * Throws an Error if invalid. Returns void / undefined if passed.\n   * @param value The state candidate to be validated.\n   * @throws if state is not a valid state\n   */\n\n  static validateState (value) {\n    if (!superToolStates[value]) {\n      throw new Error(`Invalid state: ${value}`)\n    }\n  }\n\n  /**\n   * Constructor initializes the state. If none is given, it defaults to {'great'}.\n   * @param state one of the SuperTool.state values\n   * @throws if state is not a valid state\n   */\n\n  constructor ({ state = SuperTool.states.great } = {}) {\n    SuperTool.validateState(state)\n    this._state = state\n  }\n\n  /**\n   * Validates and sets a new state value if given and returns the updated value. If no defined value is given it just returns the\n   * current state value.\n   * @param value {String|undefined} optional state to be set.\n   * @return {String} the current state value\n   */\n\n  state (value) {\n    if (exists(value)) {\n      SuperTool.validateState(value)\n      this._state = value\n    }\n    return this._state\n  }\n\n  /**\n   * Executes with the current internal state.\n   * @return {string} the execution including the current state.\n   */\n\n  execute () {\n    return `I feel ${this._state}!`\n  }\n}\n\nexport default SuperTool\n"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACO,MAAM,MAAM,GAAG,GAAG,IAAI,GAAG,KAAK,IAAI,IAAI,OAAO,GAAG,KAAK;;ACH5D;AACA;AACA;AACA;AACA,MAAM,eAAe,GAAG;AACxB,EAAE,KAAK,EAAE,OAAO;AAChB,EAAE,IAAI,EAAE,MAAM;AACd,EAAE,OAAO,EAAE,SAAS;AACpB,EAAE,IAAI,EAAE,MAAM;AACd,EAAC;AACD;AACA;AACA;AACA;AACA;AACA,MAAM,SAAS,CAAC;AAChB;AACA;AACA;AACA;AACA;AACA,EAAE,WAAW,MAAM,CAAC,GAAG;AACvB,IAAI,OAAO,eAAe;AAC1B,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,OAAO,aAAa,CAAC,CAAC,KAAK,EAAE;AAC/B,IAAI,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,EAAE;AACjC,MAAM,MAAM,IAAI,KAAK,CAAC,CAAC,eAAe,EAAE,KAAK,CAAC,CAAC,CAAC;AAChD,KAAK;AACL,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,WAAW,CAAC,CAAC,EAAE,KAAK,GAAG,SAAS,CAAC,MAAM,CAAC,KAAK,EAAE,GAAG,EAAE,EAAE;AACxD,IAAI,SAAS,CAAC,aAAa,CAAC,KAAK,EAAC;AAClC,IAAI,IAAI,CAAC,MAAM,GAAG,MAAK;AACvB,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,KAAK,CAAC,CAAC,KAAK,EAAE;AAChB,IAAI,IAAI,MAAM,CAAC,KAAK,CAAC,EAAE;AACvB,MAAM,SAAS,CAAC,aAAa,CAAC,KAAK,EAAC;AACpC,MAAM,IAAI,CAAC,MAAM,GAAG,MAAK;AACzB,KAAK;AACL,IAAI,OAAO,IAAI,CAAC,MAAM;AACtB,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,OAAO,CAAC,GAAG;AACb,IAAI,OAAO,CAAC,OAAO,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;AACnC,GAAG;AACH;;;;"}